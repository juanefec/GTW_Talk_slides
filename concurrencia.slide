Go - Programacion concurrente y patrones comunes


Gracias Rob Pike






* Introducción


Una de las cosas que más levanta la atención del lenguaje es su capacidad nativa para diseñar programas concurrentes.


- Que es la programación concurrente?
- Porque es nativa para go?
- Como lo uso?
- Ejemplos con básicos.
- Ejemplos con patrones concurrentes.










* Que es la programación concurrente?


Un programa es concurrente cuando se da la existencia simultánea de varios procesos que pueden interactuar.


Por ende es el diseño de un programa con múltiples procesos que pueden comunicarse.


No es paralelismo. 


La existencia simultánea no implica ejecución simultánea.








* No es paralelismo


No es paralelismo, pero lo permite.


En Go, si tenemos un solo thread del sistema, nuestro programa puede estar escrito de forma concurrente pero no puede ejecutar en paralelo. (magia)


Y ese mismo programa ejecutado con varios threads disponibles podría llegar tener paralelismo.








* Porque la concurrencia es nativa para go?


La concurrencia es un concepto que esta presente en todos lados.


Hasta el hardware que utilizamos hoy en día utiliza el concepto
 - Procesadores múltiples
 - Sistemas distribuidos


Simular fácilmente comportamientos del mundo real.


Y también por que es muy difícil simular estructuras de control y tipos primitivos dentro de una librería. (ej: select{}, chan)


Pero 👀
La programación concurrente acarrea ciertos problemas, principalmente al momento de compartir información y sincronizar tareas.


Por suerte! 🤩
Go nos ayuda a mitigar problemas de sincronización y memoria compartida.








* Concurrencia como diseño


Fácil de entender, usar y pensar.


Sin las herramientas de concurrencia de Go, seria mucho más complejo replicar un diseño concurrente seguro.


Existen más lenguajes con herramientas de concurrencia:
- Occam (May, 1983)
- Erlang (Armstrong, 1986)
- Newsqueak (Pike, 1988)
- Concurrent ML (Reppy, 1993)
- Alef (Winterbottom, 1995)
- Limbo (Dorward, Pike, Winterbottom, 1996).








* Basic Examples








* Función aburrida


Necesitamos un ejemplo para mostrar las propiedades interesantes en los primitivos de concurrencia.


Para evitar distracciones hacemos un ejemplo aburrido.


.play concurrency/support/boring.go /START/,/STOP.*/








* Función un poco menos aburrida

Hace los intervalos entre cada print impredecibles (<1000ms)

.play concurrency/support/lessboring.go /START/,/STOP/




* Probamos una rutina

La declaración go ejecuta la función que le sigue, pero no bloquea. (no puede retornar un valor)

Ejecuta una goroutine.

Se podría decir que es como poner al final de un comando de shell un &.

.play concurrency/support/goboring.go 1,/^}/




* Intento fallido

Cuando la función main() de un programa finaliza, finalizan las rutinas que estaban ejecutándose.

Esperamos un poco a ver si realmente están estos dos procesos ejecutándose.

.play concurrency/support/waitgoboring.go /func.main/,/^}/




* Goroutines

Que es una goroutine? Es la ejecución independiente de una función, se usa con el prefijo go delante de la llamada a una función.

Tiene su propio call-stack, el mismo se adapta al tamaño necesario.

Es barato. Es común ver programas con miles de goroutines, y hasta cientos de miles.

No es un thread.

Un programa con miles de goroutines funciona aunque tenga disponible un solo thread.

Ya que se multiplexan dinámicamente en subprocesos según sea necesario para mantener todas las goroutines en ejecución.

De todos modos si pensamos en una goroutine como un thread muy barato, no estaríamos muy lejos...




* Comunicación

Nuestros ejemplos aburridos hicieron trampa: nunca se obtuvo desde el main el output de la goroutine

Únicamente se escribió en la consola...

Para una conversación es necesario tener comunicación




* Channels

Un channel en Go provee una conexión entre goroutines, permitiéndoles comunicarse.

.code concurrency/support/helpers.go /START1/,/STOP1/
.code concurrency/support/helpers.go /START2/,/STOP2/
.code concurrency/support/helpers.go /START3/,/STOP3/




* Usando channels

Un channel que conecta el main y una goroutine aburrida para así poder comunicarse.

.play concurrency/support/changoboring.go /START1/,/STOP1/
.code concurrency/support/changoboring.go /START2/,/STOP2/




* Sincronización

Cuando el main ejecuta 
.code concurrency/support/helpers.go /START3/,/STOP3/
bloquea hasta recibir un nuevo valor.

También cuando la función aburrida ejecuta 
.code concurrency/support/helpers.go /START2/,/STOP2/
bloquea hasta que se esté esperando un valor en c.

El sender y el reciver de la comunicación necesitan estar listos para hacer su parte, si no, se espera hasta que lo estén.

Por eso es que los channels además de comunicar sincronizan.




* !(Buffered channels)

Los channels también pueden ser creados con un buffer.

El channel con buffer pierde la sincronización

Puede ser importante para resolver determinados tipos de problemas, su uso lleva otro razonamiento.

Hoy no los vamos a ver.




* El approach en Go

"Don't communicate by sharing memory, share memory by communicating."

No comunicar compartiendo memoria, compartir memoria comunicando.




* "Patrones"




* Generador: función que retorna un channel

El channel es un valor primitivo, como una string o un int.

.play concurrency/support/generatorboring.go /START1/,/STOP1/
.code concurrency/support/generatorboring.go /START2/,/STOP2/




* Channels para manejar servicios

Nuestra función aburrida retorna un channel que nos permite comunicarnos con el aburrido servicio que provee.

Esto nos permite crear más instancias de nuestro servicio aburrido.

.play concurrency/support/generator2boring.go /START1/,/STOP1/




* Multiplexing

El programa anterior deja la cuenta de Ann y Joe en un lockstep, es decir que espera a que los dos hayan hecho su tarea para seguir.

Podemos mejorar eso implementando una función fan-in para leer los mensajes de quien sea y redirigirlo al output.

.code concurrency/support/faninboring.go /START3/,/STOP3/
.play concurrency/support/faninboring.go /START1/,/STOP1/




* Fan-in

.image concurrency/images/gophermegaphones.jpg




* Restaurar ejecución.

Desde el proceso podemos mandar un mensaje con un channel.

De esta forma podemos indicarle cuando seguir ejecutándose al proceso.

Entonces, recibo mis mensajes, y después le indico a cada generador "podés seguir", enviándoles un mensaje al channel que está en el mensaje recibido.

Parece muy complejo pero no,

Tenemos un generador que retorna un channel para escucharlo, le hacemos fanIn de varios channels a un solo output, y ese output tiene la capacidad de desbloquear la próxima ejecución del servicio que lo genero.

Definamos un tipo para que el channel del servicio retorne. (este va a tener nuestro channel para indicar la continuación)

.code concurrency/support/sequenceboring.go /START0/,/STOP0/




* Restaurar ejecución.

Cada generador espera su señal para poder seguir con la ejecución.

.code concurrency/support/sequenceboring.go /START1/,/STOP1/
.code concurrency/support/sequenceboring.go /START2/,/STOP2/
.play concurrency/support/sequenceboring.go /START3/,/STOP3/




* Select

Una estructura de control únicamente para procesos concurrentes.

Dicho por Rob Pike "The reason channels and goroutines are built into the language."

La razón por la cual los channels y las goroutines son parte del lenguaje.




* Select

La declaración de un select provee otra manera de manejar múltiples channels.
Es como un switch, pero cada case es una comunicación:
- Se evalúan todos los channels.
- Bloquea hasta que haya un channel listo.
- Si se dan múltiples cases, se elige de manera pseudo-random.
- Si no hay channels listos, el default se ejecuta instantáneamente.

.code concurrency/support/select.go /START0/,/STOP0/




* Fan-in we go agane

Solo es necesario una goroutine para este tipo de casos.

Old:

.code concurrency/support/faninboring.go /START3/,/STOP3/




* Fan-in select

New:

.play concurrency/support/selectboring.go /START3/,/STOP3/




* Timeout con select

time.After: retorna un channel que bloquea por la duración especificada.
después del intervalo envía un time.Time una sola vez.

.play concurrency/support/timeout.go /START1/,/STOP1/




* Timeout de todo el proceso

Creamos el timer UNA SOLA VEZ fuera del loop para finalizar el proceso completo.
(en el programa anterior se hacía timeout de cada mensaje esperado)

.play concurrency/support/timeoutall.go /START1/,/STOP1/





* Exit channel

Podemos cambiar esto y hacer que el generador termine cuando le indiquemos.

.code concurrency/support/quit.go /START1/,/STOP1/
.play concurrency/support/quit.go /START2/,/STOP2/





* Notificar el exit.

Como podemos saber si nuestro generador termino con su trabajo?
Esperamos que nos avise: bloqueamos leyendo el channel end luego de enviar la señal.

.code concurrency/support/rcvquit.go /START1/,/STOP1/
.play concurrency/support/rcvquit.go /START2/,/STOP2/





* Systems software

Go es un lenguaje diseñado para escribir system-software.
Veamos como se pueden utilizar estas features en un sistema.




* Ejemplo: Google Search
	
Q: Que hace el search de google?

A: Dada una query, retorna los resultados de búsqueda (y algún ad).

Q: Como obtenemos los resultados de búsqueda?

A: Mandamos una petición al servicio de Webs, Images, Youtube, Maps, News, etc., y combinamos estos resultados. 

Como lo implementamos?




* Google Search: A fake framework

Simulamos una función Search.

.code concurrency/support/google.go /START2/,/STOP2/




* Google Search 1.0

La función Google toma una query y retorna un slice de resultados

Se ejecuta cada servicio (Web, Video, Image) secuencialmente y se acumulan los resultados.

.code concurrency/support/google.go /START1/,/STOP1/

.play concurrency/support/google.go /func.main/,/}/




* Google Search 2.0

Ahora ejecutamos Web, Image y Video concurrentemente, y esperamos todos los resultados.

Sin locks, sin variables condicionales, sin callbacks.

.play concurrency/support/google2.1.go /Google/,/^}/




* Google Search 2.1

Somos impacientes...

Así que agregamos un timeout.

.play concurrency/support/google2.2.go /START/,/STOP/




* Evitar timeouts

Q: Como evito descartar peticiones por timeout?

A: Replicamos el servidor. Enviamos múltiples réplicas y usamos la primera respuesta. 

.code concurrency/support/google2.3.go /START1/,/STOP1/

.play concurrency/support/google2.3.go /START2/,/STOP2/




* Google Search 3.0

Reducimos el tiempo de respuesta ampliamente, ya que ahora se hacen dos peticiones por servicio y se espera solo a la más rápida.

.play concurrency/support/google3.0.go /START/,/STOP/




* Sin locks, variables condicionales, ni callbacks.

En unos pocos pasos transformamos un programa lento, secuencial y propenso a fallar en un programa rápido, concurrente, replicado, y robusto.




* No exagerar el uso.

Es un concepto muy divertido de utilizar, pero no es necesario para todo. Si el problema es simple la solución también.

Las goroutines y los channels son herramientas para la construcción de software.

Pero a veces lo único que necesitas es un contador de referencias, para eso está el pkg "sync" y "sync/atomic", este nos provee de mutexes, variables de condición, herramientas para problemas más simples.

Es común ver a estos dos trabajando juntos para resolver un problemon.

Siempre usemos la herramienta correcta para el trabajo.




* Conclusión

Las goroutines y los channels facilitan la expresión de operaciones complejas que involucran:

- inputs múltiples
- outputs múltiples
- timeouts
- errores

Y son divertidos de usar 🤓
